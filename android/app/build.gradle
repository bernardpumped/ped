def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.pumpedfuel.pumpedenddevice"
        minSdkVersion 28
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    signingConfigs {
        debug {
            storeFile keystoreProperties['debug_storeFile'] ? file(System.getProperty("user.home") + keystoreProperties['debug_storeFile']) : null
            storePassword keystoreProperties['debug_storePassword']
        }
        release {
            keyAlias keystoreProperties['release_keyAlias']
            keyPassword keystoreProperties['release_keyPassword']
            storeFile keystoreProperties['release_storeFile'] ? file(keystoreProperties['release_storeFile']) : null
            storePassword keystoreProperties['release_storePassword']
        }
        playStore {
            keyAlias keystoreProperties['playStore_keyAlias']
            keyPassword keystoreProperties['playStore_keyPassword']
            storeFile keystoreProperties['playStore_storeFile'] ? file(keystoreProperties['playStore_storeFile']) : null
            storePassword keystoreProperties['playStore_storePassword']
        }
    }

    buildTypes {
        debug {
            ndk {
                abiFilters 'armeabi-v7a','arm64-v8a','x86_64','x86'
            }
        }
        release {
            ndk {
                abiFilters 'armeabi-v7a','arm64-v8a','x86_64','x86'
            }
        }
        playStore {
            ndk {
                abiFilters 'armeabi-v7a','arm64-v8a','x86_64','x86'
            }
        }
    }

    flavorDimensions 'PED'

    productFlavors {
        debugApp {
            dimension "PED"
            buildTypes.debug.debuggable true
            buildTypes.debug.minifyEnabled false
            buildTypes.debug.shrinkResources false
            buildTypes.debug.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        releaseApp {
            dimension "PED"
            buildTypes.release.debuggable false
            buildTypes.release.minifyEnabled true
            buildTypes.release.shrinkResources true
            buildTypes.release.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        playStoreApp {
            dimension "PED"
            buildTypes.playStore.debuggable false
            buildTypes.playStore.minifyEnabled true
            buildTypes.playStore.shrinkResources true
            buildTypes.playStore.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.playStore
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
